package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Trader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
                                PositionDao positionDao, SecurityOrderDao securityOrderDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount
     *
     * @param trader that cannot be null. All fields except for id (auto-generated by db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not nulll
     */
    public TraderAccountView createTraderAndAccount(Trader trader){
    }

    /**
     * A trader can be deleted if has no open position and 0 cash balance
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to delete
     */
    public void deleteTraderByID(Integer traderId){}

    /**
     * Deposit fund to an account by  trader ID
     *
     * @param traderId trader ID
     * @param fund must be greater than 0
     * @return updated account
     * @throws IllegalArgumentException if traderID is null or not found,
     *                                  fund is less or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {

    }

    /**
     * Withdraw fund to an account by  trader ID
     *
     * @param traderId trader ID
     * @param fund can't be 0
     * @return updated account
     * @throws IllegalArgumentException if traderID is null or not found,
     *                                  fund is less or equal to 0, and insufficient balance
     */
    public Account withdraw(Integer traderId, Double fund){ }
}
